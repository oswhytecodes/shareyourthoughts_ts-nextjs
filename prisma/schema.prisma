generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorites[]
  messages      Messages[]
  profile       Profile[]
}
model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String    @unique
  username String  @unique
  // name     String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Favorites {
  messageID   Int      @id
  userId      String
  userMessage String   @db.VarChar(45)
  date        DateTime @db.DateTime(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Messages {
  id          Int      @id @default(autoincrement())
  userId      String
  userMessage String   @db.Text
  date        DateTime @default(now()) @db.DateTime(0)
  favorite    Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
